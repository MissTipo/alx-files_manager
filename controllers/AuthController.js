const crypto = require('crypto');
const { v4: uuidv4 } = require('uuid');
const dbClient = require('../utils/db');
const redisClient = require('../utils/redis');


function sha1password(password){
  const hash = crypto.createHash('sha1');
  hash.update(password);
  return hash.digest('hex');
}

function base64Decode(token){
  const decoded = Buffer.from(token, 'base64').toString('utf-8');
  const pass = Buffer.from(token, 'base64');
  return pass
}

const AuthController = {
  async getConnect(req, res) {
    const auth = req.headers.authorization;
    const input = auth.split(' ')[1];
    //input is the base64 encoded string
    // console.log({input});
    const buff = Buffer.from(input, 'base64').toString('utf-8').split(':');
    const email = buff[0];
    //hashed password
    // console.log(email);
    const hashedpassword = sha1password(buff[1]);
    // console.log({hashedpassword});
    const user = await dbClient.getuser(email);
    //user from dbClient.getuser
    // console.log(user);

    try {
      if (user.password === hashedpassword) {
        const token = uuidv4();
        const key = `auth_${token}`;
        //the key is auth_userId generated by uuidv4
        // console.log({key});
        let resp =await redisClient.set(key, user._id, 86400);
        // console.log({redis_response:resp})
        res.status(200).json({ "token": token });
        //checking for tokken
        // console.log({token});
      }

    } catch (error) {
      res.status(401).json({ error:error});
      
    }
  },
  //getdisconnect
async getdisconnect(req, res) {
    const token = req.headers['x-token'];
    //get the tokken from the header 
    // console.log({token})
    const key = `auth_${token}`;
    // console.log(key)

    try {
      const userId = await redisClient.get(key);
      // console.log({userId})
      const user = await dbClient.getuserId(userId);
      // console.log({user});
      if (user) {
        await redisClient.del(key);
        res.status(204).json('');
      } else {
        res.status(401).json({ error: 'Unauthorized' });
      }
    } catch (error) {
      res.status(401).json({ error: 'Unauthorized user not found' });
    }
  },
  //getme
  async getMe(req, res) {
    const token = req.headers['x-token'];
    const key = `auth_${token}`;
    // console.log(key)
    try {
      const userId = await redisClient.get(token);
      //no user userid found fix this
      // console.log(userId)
      if(userId){
        const user = await dbClient.getuser(userId);
        // console.log(user)
        if(user) {
          // console.log(user)
          res.status(200).json({ id: user._id, email: user.email });
        } else {
          res.status(401).json({ error: 'Unauthorized' });
        }
      }
    } catch (error) {
      res.status(401).json({ error: 'Unauthorized' });
    }

  }
};

module.exports = AuthController;
